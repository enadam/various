#!/bin/bash
#
# masstag -- tag MP3, FLAC and MP4 files in batch
#
# Synopsis:
#   masstag {-2|--flac|--mp4} [-C] [-T <titles-file>] [<tags>...] [--] 
#	    [<files>...]
#
# If <files> are not specified on the command line, first they are read from
# ./playlist, *.m3u, *.M3U, or *.M3u and then in the current directory
# looking for *.mp3, *.flac and *.mp4 files with varying capitalization,
# and finally from the standard input.  MP3, FLAC and MP4 files must not
# be mixed.
#
# Options:
#   -2			Write ID3v2 tags with id3v2(1).  Otherwise,
#			mp3info(1) is used, but a warning is emitted
#			if a tag is truncated due to ID3v1's limitations.
#   --flac		Write FLAC tags with metaflac(1).  This option
#			must be specified first if operating on FLAC
#			files.
#   --mp4		Write XMP (?) tags with ffmpeg(1).  Like --mp4,
#			this option must precede any tagging option.
#   -C			Commit changes.  If not specified, masstag just
#			prints the commands it would execute.
#   -T <titles-file>	Read and set the titles of <files> from
#			<titles-file>, which should contain one title
#			per line.  The number of titles should correspond
#			to the number of <files>.
#   -a <artist>, -{l|A} <album>, -t <title>, -g {<genre>|<genre-number>},
#   -y <year>, -c <comment>
#			Set the specified tag.  Only specified tags are
#			modified.
#   --<TAG> <value>	Set the specified tag (-2, --flac, --mp4 modes only).
#			Note that ffmpeg doesn't accept arbitrary tags.
#   -n <trackno>	Designates the track number of the first file to
#			be processed.  Subsequent files get increasing
#			track numbers.  If not specified, track numbers
#			remain untouched.  This switch doesn't make sense
#			for video files.
#   --			End of options.

do_ffmpeg()
{
	local testing="$1";
	local fname="$2";
	shift 2;

	tmpfile=`mktemp masstag-XXXXXX-$fname`;
	if $testing ffmpeg -loglevel error \
		-i "$fname" -c:v copy -c:a copy "$@" -y "$tmpfile" \
		< /dev/null;
	then
		$testing mv -f "$tmpfile" "$fname";
		[ "$testing" = "" ] || rm "$tmpfile";
	else
		rm -f "$tmpfile";
		exit 1;
	fi
}

# The maximum length of an ID3v1 tag's value.
id3v1_maxlen=30;

# Parse the command line.
args=();
track="";
titles="";
kind="id3v1";
testing="echo";
while [ $# -gt 0 ];
do
        case "$1" in
        --)
                break;
                shift;
                ;;
        -C)
                testing="";
                shift;
                ;;
	-2)
		kind="id3v2";
		shift;
		;;
	--flac|--mp4)
		# metaflac and ffmpeg options are totally different from
		# mp3info's and id3v2's.  We need to be told beforehand
		# to use it.
		if [ ${#args[@]} -gt 0 ];
		then
			echo "$0: $1 should precede tags" >&2;
			exit 1;
		fi
		kind="${1#--}";
		shift;
		;;
        -[TnAlatgyc]|--[A-Z]*)
		checklen="no";
                if [ $# -lt 2 ];
                then
                        echo "$0: required parameter missing" >&2;
                        exit 1;
                elif [ "x$1" = "x-T" ];
                then
                        titles="$2";
                elif [ "x$1" = "x-n" ];
                then
			if [ "$kind" = "mp4" ];
			then
				echo "$0: cannot set track number " \
					"for video files" >&2;
				exit 1;
			fi
                        track="$2";
		elif [ "x$1" = "x-A" -o "x$1" = "x-l" ];
		then	# We accept both, but mp3info(1) and id3v2(1) need
			# different arguments.
			case "$kind" in
			id3v1)
				args[${#args[@]}]="-l";
				args[${#args[@]}]="$2";
				checklen="yes";
				;;
			id3v2)
				args[${#args[@]}]="-A";
				args[${#args[@]}]="$2";
				;;
			flac)
				args[${#args[@]}]="--set-tag=ALBUM=$2";
				;;
			mp4)
				args[${#args[@]}]="-metadata";
				args[${#args[@]}]="Album=$2";
				;;
			esac
		elif [ "$titles" != "" -a "x$1" = "x-t" ];
		then
			echo "$0: -t and -T are mutually exclusive" >&2;
			exit 1;
		elif [ "$kind" = "mp4" ];
		then
			case "$1" in
			-a)
				tag="Composer";
				;;
			-t)
				tag="Title";
				;;
			-g)
				tag="Genre";
				;;
			-y)
				tag="Date";
				;;
			-c)
				tag="Comment";
				;;
			--*)
				tag="${1#--}";
				;;
			esac

			args[${#args[@]}]="-metadata";
			args[${#args[@]}]="$tag=$2";
		elif [ "$kind" = "flac" ];
		then
			case "$1" in
			-a)
				tag="ARTIST";
				;;
			-t)
				tag="TITLE";
				;;
			-g)
				tag="GENRE";
				;;
			-y)
				tag="DATE";
				;;
			-c)
				tag="DESCRIPTION";
				;;
			--*)
				tag="${1#--}";
				;;
			esac

			args[${#args[@]}]="--set-tag=$tag=$2";
		else # id3v1 or id3v2
			case "$1" in
			-[atc])
				# Check the length of artists and comments.
				checklen="yes";
				;;
			--*)
				if [ "$kind" = "id3v1" ];
				then
					echo "$0: $1 can't be used with " \
						"ID3v1 tags" >&2;
					exit 1;
				fi
				;;
			esac

			args[${#args[@]}]="$1";
			args[${#args[@]}]="$2";
                fi

		# Check the tag value's lenght if necesssary.
		if [ "$kind" = "id3v1" -a "$checklen" = "yes" \
			-a ${#2} -gt $id3v1_maxlen ];
		then
			echo "$0: value of $1 is too long for ID3v1" >&2;
		fi

                shift 2;
                ;;
	--)
		shift;
		break;
		;;
        -*)
                echo "$0: $1: unknown option" >&2;
                exit 1;
                ;;
	*)
                break;
                ;;
        esac
done

# Get the file names to be processed unless they're specified
# on the command line.
if [ $# -eq 0 ];
then
	found="no";
	shopt -s nullglob;
	for playlist in playlist *.m3u *.M3U *.M3u;
	do	# Read from a playlist file
		# Prevent bash from splitting on spaces.
		[ -f "$playlist" ] || continue;
		tmp="$IFS";
		IFS="
";
		# Mind \r\n line endings.
		set -- `tr -d '\r' < "$playlist"`;
		IFS="$tmp";
		found="yes";
	done

	if [ "$found" = "no" ];
	then	# Fail, look for MP3 and FLAC files in the current directory.
		if [ "$kind" = "mp4" ];
		then
			set -- *.mp4 *.MP4 *.Mp4;
		elif [ "$kind" = "flac" ];
		then
			set -- *.flac *.FLAC;
		else
			set -- *.mp3 *.MP3 *.Mp3;
		fi

		if [ $# -eq 0 ];
		then	# Fail, read from standard input.
			while read mp3;
			do
				set -- "$@" "$mp3";
			done
		fi
	fi
fi

# Anything to do?
[ $# -gt 0 ] || exit 0;

# Which $prog to use for setting the tags?
case "$kind" in
id3v1)
	prog="mp3info";
	;;
id3v2)
	prog="id3v2";
	;;
flac)
	prog="metaflac";
	;;
mp4)
	prog="ffmpeg";
	;;
esac

# Anything special to do?
if [ "$titles" = "" -a "$track" = "" ];
then
	[ ${#args[@]} -gt 0 ] || exit 0;
	if [ "$prog" = "ffmpeg" ];
	then
		for fname;
		do
			do_ffmpeg "$testing" "$fname" "${args[@]}";
		done
		exit;
	else
		exec $testing $prog "${args[@]}" -- "$@";
	fi
fi

# Run
# We have many mode of operations: $titles or $track given or not,
# and which $prog to use.
if [ "$titles" != "" ];
then
	tr -d '\r' < "$titles" \
	| while :;
	do
		# Get $fname.  Are we finished?
		if [ $# -gt 0 ];
		then
			fname="$1";
			shift;
		else	# Check for excessive $titles.
			read title;
			if [ $? -eq 0 ];
			then
				echo "$0: too many titles" >&2;
				exit 1;
			fi
			break;
		fi

		# Get the title for $fname.
		read title;
		if [ $? -ne 0 ];
		then
			echo "$0: out of titles" >&2;
			exit 1;
		fi
		if [ "$kind" = "id3v1" -a ${#title} -gt $id3v1_maxlen ];
		then
			echo "$0: title is too long for ID3v1" >&2;
		fi

		# Set the tags for $fname.
		if [ "$track" != "" ];
		then
			case "$kind" in
			id3v1)
				$testing $prog "${args[@]}" -t "$title" \
					 -n "$track" -- "$fname";
				;;
			id3v2)
				$testing $prog "${args[@]}" -t "$title" \
					 -T "$track" -- "$fname";
				;;
			flac)
				$testing $prog "${args[@]}" \
					--set-tag=TITLE="$title" \
					--set-tag=TRACKNUMBER="$track" \
					-- "$fname";
				;;
			esac

                        track=$((track+1));
		elif [ "$prog" = "ffmpeg" ];
		then
			do_ffmpeg "$testing" "$fname" "${args[@]}" \
				-metadata Title="$title";
		elif [ "$kind" = "flac" ];
		then
                        $testing $prog "${args[@]}" --set-tag=TITLE="$title" \
				-- "$fname";
		else	# mp3
                        $testing $prog "${args[@]}" -t "$title" -- "$fname";
		fi
	done
	[ $? -eq 0 ] || exit $?;
else
	for fname;
	do
		# Set the tags for $fname.
		if [ "$track" != "" ];
		then
			case "$kind" in
			id3v1)
				$testing $prog "${args[@]}" -n "$track" \
					-- "$fname";
				;;
			id3v2)
				$testing $prog "${args[@]}" -T "$track" \
					-- "$fname";
				;;
			flac)
				$testing $prog "${args[@]}" \
					--set-tag=TRACKNUMBER="$track" \
					-- "$fname";
				;;
			esac

                        track=$((track+1));
		elif [ "$prog" = "ffmpeg" ];
		then
			do_ffmpeg "$testing" "$fname" "${args[@]}";
		else
                        $testing $prog "${args[@]}" -- "$fname";
		fi
	done
fi

# Done
exit 0;

# End of masstag
